[ { "title": "出发点", "url": "/posts/intention/", "categories": "issue", "tags": "", "date": "2023-01-11 06:30:00 +0800", "snippet": "出发点做事情总有出发点，特别是面向社会公开的事情。 我是谁？我从哪来? 要到哪去？为啥我要专为出发点写一个文章表达？ 总觉得做事没有明确的、让人理解的出发点，很难让别人赞成和支持你所作所为；甚至有人想帮助支持你的时候但不是很理解你的出发点想法，也不知道如何去做才能有效的帮助到你（作为身边人）。做点有意思的 有些东西结果固然重要，但是做与不做是另一回事。 总感觉很多平台少了点味道，具体在哪也说不明。100年前东西方技术差距可以是现在的谈资，100年后谁还记得谁，只希望百年后没有技术与协议差距。并且精神身体灵魂越来越来好。本人在做一个信息交流、沟通合作（基于协议&amp;amp;兴趣）..." }, { "title": "Css", "url": "/posts/css/", "categories": "", "tags": "", "date": "2023-01-04 00:00:00 +0800", "snippet": "cssdiv级联继承layoutflexboxflex-wrap: wrap #子组件应用 flex布局flex-direction: column / rowmargin-inline-start: auto; ##将最后一个inline 子模块分离区别于其他同一行的元素 使自己在一行的最右边grid" }, { "title": "用户管理", "url": "/posts/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/", "categories": "", "tags": "", "date": "2023-01-04 00:00:00 +0800", "snippet": "添加用户addUser usernamepasswd username# input password添加用户组groupadd groupname组管理将用户添加到组usermod -g groupname username## 添加组的读写权限chmod -R g+rw platformumask 文件权限管理umask 002" }, { "title": "用户指纹", "url": "/posts/%E7%94%A8%E6%88%B7%E6%8C%87%E7%BA%B9/", "categories": "Technology^技术, Website^网站", "tags": "writing, website", "date": "2022-06-29 21:31:00 +0800", "snippet": "用户指纹用户 （灵识）user设计上来说 用户是独一无二的，用户在创建时不会有第二次创建灵魂标记账号在考虑用户的个性化和安全上，账号应该是独一无二的，这种账号应该是只有本人才能登陆的账号。构思上来说，灵魂时独一无二的，所以电脑也不能把一个独一无二的灵魂保存到数据库，但是我们可以录入灵魂指纹。就像人的指纹时独一无二的一样，灵魂指纹也是如此且更抽象。" }, { "title": "gitlab使用docker安装", "url": "/posts/gitlab%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85/", "categories": "Technology^技术, Tools&Programs^程序工具", "tags": "writing, linux, docker", "date": "2022-01-21 18:00:00 +0800", "snippet": "gitlab 使用docker安装环境centos7内存最低不小于4G安装docker前文清理 卸载之前的docker环境yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate ..." }, { "title": "Java-jvm调优文档摘要", "url": "/posts/Java-jvm%E8%B0%83%E4%BC%98%E6%96%87%E6%A1%A3%E6%91%98%E8%A6%81/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2021-09-26 00:10:00 +0800", "snippet": "Java-jvm调优文档摘要官方文档：https://docs.oracle.com/en/java/javase/16/gctuning/factors-affecting-garbage-collection-performance.html关于官方文档的理解，jdk版本不同参数略有区别，特别是jdk1.8之后的改动，取消了永久代这个区域，1.8没有ZGC垃圾回收器，但jdk16的jvm中有ZGC垃圾收集器。jvm为什么需要调优？合理高效的使用两个关键硬件资源：CPU、内存。 JVM(Java Virtual Machine) Java虚拟机是指运行Java程序的虚拟系统，一般运行..." }, { "title": "关于netty", "url": "/posts/%E5%85%B3%E4%BA%8Enetty/", "categories": "Technology^技术, Java", "tags": "writing, Java, netty", "date": "2021-07-11 00:20:00 +0800", "snippet": "关于nettynetty 是一个非阻塞IO框架，用于Java网络应用开发，特点是异步处理，并发处理能力，netty里面包含有reactor框架的实现，是一个非常高级的框架体系。netty特性netty 处理快，更少的资源需求，响应快，可以作为高并发场景服务器的一个选择reactor 个人理解是 react：响应式， or ：对象，就是响应式框架，netty 就是运用reactor 的核心设计思想编写的高性能高并发网络请求处理器框架。以下来自维基百科，自由的百科全书跳到导航跳到搜索注意：本条目主题可能尚无中文译名，因而使用原文或其拉丁字母转写作为标题。如果您在可靠来源中找到本主题的中文名称..." }, { "title": "基于随机定位的地图信息获取方式", "url": "/posts/%E5%9F%BA%E4%BA%8E%E9%9A%8F%E6%9C%BA%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%9C%B0%E5%9B%BE%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96%E7%AE%97%E6%B3%95/", "categories": "Technology^技术, Algorithm^算法", "tags": "writing, Algorithm, map", "date": "2021-06-13 07:29:00 +0800", "snippet": "基于随机定位的地图信息获取方式基本定义场景一个应用要用到地图，地图拖动时，要填补新的版图上的地理信息目的快速获取屏幕内需要的地图信息，不获取多余无用的地图信息功能要点1.确定地图范围，获取的信息不超出显示屏过多（比如屏幕地图查询100平方米的信息，服务返回的信息不能超过130平米的地图信息）2.动态快速获取信息，通过定位快速获取周围地理信息，第一时间从缓存获取或者数据库获取，且不要有复杂查询和大量查询。绝对定位：坐标，传人任何一个点，都能通过角色定位知道这个点在哪，以及其他延伸计算通过地图的中心定位，优先快速确定要获取那些位置的地理信息，快速获取对应的图块。3.根据维度调整信息获取范围和..." }, { "title": "AbstractQueuedSynchronizer抽象类-阻塞锁", "url": "/posts/AbstractQueuedSynchronizer%E6%8A%BD%E8%B1%A1%E7%B1%BB-%E9%98%BB%E5%A1%9E%E9%94%81/", "categories": "Technology^技术, Java", "tags": "writing, Java, AbstractQueuedSynchronizer", "date": "2021-03-20 00:10:00 +0800", "snippet": "AbstractQueuedSynchronizer抽象类-阻塞锁AbstractQueuedSynchronizer是多线程情况下保证代码快有序运行的一种设计，对多线程获取锁进行了抽象，设计中包括：1.线程队列（阻塞的线程）当很多线程竞争锁的时候，排队一个个获取锁，先进先出2.线程获取锁，成功就执行后面的代码3.线程释放锁，如果等待队列中有线程，唤醒队列中的线程关键方法有addWaiter 添加阻塞线程到队列acquire 获取锁，release 释放锁。线程等待队列线程队列结构队列是双向链表，通过prev（前） 和 next （后）连接，整个队列有两个初始变量，head 与 tail..." }, { "title": "certbot 获取数字证书失效问题", "url": "/posts/certbot%E8%8E%B7%E5%8F%96%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/", "categories": "Technology^技术, Tools&Programs^程序工具", "tags": "writing, docker, certbot, ssl", "date": "2021-02-18 10:45:00 +0800", "snippet": "certbot 获取数字证书失效问题数字证书 数字证书就是一个网站域名在通信时使用了安全加密的证明数字证书为网站数据交互提供加密，用于保障通信保密安全，数字证书不是随意创建的，一般需要比较有公信力的组织或团队提供数字证书才会被认可。 个人创建一个证书，即使技术厉害别人也要花较多时间成本去了解一个团队，类似谷歌微软BAT确认可靠的数字证书，还是会有比较多的人容易信任认可的。certbotcertbot是一个网站https免费证书工具，可以申请获取自己域名的证书，保证客户端与网站的通信安全certbot 获取数字证书失效certbot –nginx 获取证书失败[root@ip-172-3..." }, { "title": "了解学习使用docker", "url": "/posts/%E5%AD%A6%E4%B9%A0%E4%BA%86%E8%A7%A3%E4%BD%BF%E7%94%A8docker/", "categories": "Technology^技术, Tools&Programs^程序工具", "tags": "writing, docker", "date": "2021-02-05 16:48:00 +0800", "snippet": "学习了解使用dockerdocker是项目开发部署相关工具容器，本文通过官网等资料阅读学习，简单介绍一些基本使用操作： docker是什么 docker安装使用 连接进入docker容器 docker拉取复制和上传docker是什么 为什么会出现docker，常使用项目部署开发的人自然能理解，因为docker让服务部署更快更高效。下面说一下docker是什么，有什么用，等同与说明为什么会出现docker这种技术。docker主要是让服务部署更高效。官网称之为容器 container，在项目开发中开发环境/测试环境/生产环境通过docker容器技术统一，减少环境误差导致产生的错误..." }, { "title": "SpringCloud-常用组件介绍", "url": "/posts/SpringCloud-%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/", "categories": "Technology^技术, Java, Spring", "tags": "writing, Java, Spring, SpringCloud", "date": "2021-01-31 22:12:00 +0800", "snippet": "分布式系统开发用于分布式环境（多个服务器不在同一个机房，同一个业务服务在多台服务器运行）Spring Cloud 是基于Springboot的分布式云服务架构，SpringCloud的设计就是为了分布式的云环境设计下面说一些SpringCloud项目在开发中常用的几个组件说组件之前，将一些分布式相关的概念 CAP定理 指分区容错性 服务可用性 数据一致性，分布式环境： ​ 容错性，允许部分机器故障，但是系统人仍能正常运作 ​ 服务可用性 任何时候调用服务有响应 ​ 数据一致性 任何时候获取数据都一样(访问不同机器节点相同的业务数据)CAP定理因为分布式而存在，离开具体业务..." }, { "title": "代孕引发的关于人类未来生命的思考", "url": "/posts/%E4%BB%A3%E5%AD%95%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/", "categories": "Life^生活, Think^思考", "tags": "writing, Think", "date": "2021-01-20 23:45:00 +0800", "snippet": "吃瓜内容最近大家都在吃瓜，源于网上一段通话录音。通过录音，和网络信息了解，信息大致是说：zs和zh同居在一起，并且两个人有代孕，后面因为两人感情不合分手，女方打算抛弃孩子（不想抚养）。不评价这个瓜她如何，只从观察人类角度去看，事情中的代孕背后的本质引起了我对人类未来生命发展的思考。录音内容抛开具体人是谁，从社会角度去看，事情就是思考人类代孕和抛弃这两件事对事件感想当人们在微博发一些动态表达写看法凑凑热闹的时候，我也会想着，评论一句，当时在想写什么看法；对此脑子里第一想到的是：少了点灵魂。（我无法描述什么是灵魂，但觉得存在）。有孕育能力的情况下选择代孕，并且打算抛弃抚养，人性淡的离谱，甚至..." }, { "title": "Mybatis的缓存", "url": "/posts/MyBatis%E7%9A%84%E7%BC%93%E5%AD%98/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2021-01-09 00:10:00 +0800", "snippet": "Mybatis的缓存mybatis是一个查询数据库的封装框架，主要是封装提供灵活的增删改sql，开发中，service层能够通过mybatis组件查询和修改数据库中表的数据；作为查询工具，mybatis有使用缓存，这里讲一下mybatis的缓存相关源码。缓存在计算机里面，任何信息都有源头，缓存一般指源头信息读取后，放在内存或者其他读取较快的地方，下次读取相同信息不去源头查询而是直接从内存（或者能快速存取的硬件）读取。这样可以减少硬件使用，提高读取速度。mybatis也是这样，查询数据库的数据之后，mybatis可以把查询结果缓存到内存，下次查询如果查询语句相同，并且查询相关的表的数据没被..." }, { "title": "SpringBoot-启动流程", "url": "/posts/SpringBoot-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/", "categories": "Technology^技术, Java, Spring", "tags": "writing, Java, Spring", "date": "2021-01-08 20:10:00 +0800", "snippet": "SpringBoot-启动流程平时开发springboot项目的时候，一个SpringBootApplication注解加一个main方法就可以启动服务器运行起来（默认tomcat），看了下源码，这里讲下认为主要的流程主要流程如下0.启动main方法开始1.初始化配置：通过类加载器，（loadFactories）读取classpath下所有的spring.factories配置文件，创建一些初始配置对象；通知监听者应用程序启动开始，创建环境对象environment，用于读取环境配置 如 application.yml2.创建应用程序上下文-createApplicationContex..." }, { "title": "ReentrantLock锁", "url": "/posts/Java%E4%B8%AD%E7%9A%84ReentrantLock%E9%94%81/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2020-12-26 21:10:00 +0800", "snippet": "ReentrantLock锁ReentrantLock是Java中常用的锁，属于乐观锁类型，多线程并发情况下。能保证共享数据安全性，线程间有序性ReentrantLock通过原子操作和阻塞实现锁原理，一般使用lock获取锁，unlock释放锁，下面说一下锁的基本使用和底层基本实现原理，lock和unlock底层lock的时候可能被其他线程获得所，那么此线程会阻塞自己，关键原理底层用到Unsafe类的API: CAS和park使用java.util.concurrent.locks.ReentrantLock类在多线程环境下使用，创建锁对象，调用lock()获取锁开始处理逻辑，处理完unl..." }, { "title": "Tomcat用线程池处理http并发请求", "url": "/posts/Tomcat-%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%84%E7%90%86http%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/", "categories": "Technology^技术, Java", "tags": "writing, Java, Tomcat", "date": "2020-12-23 22:10:00 +0800", "snippet": "Tomcat用线程池处理http并发请求通过了解学习tomcat如何处理并发请求了解到线程池，锁，队列，unsafe类，下面的主要代码来自java-jre：sun.misc.Unsafejava.util.concurrent.ThreadPoolExecutorjava.util.concurrent.ThreadPoolExecutor.Workerjava.util.concurrent.locks.AbstractQueuedSynchronizerjava.util.concurrent.locks.AbstractQueuedLongSynchronizerjava.util..." }, { "title": "Tomcat如何建立连接获取http请求", "url": "/posts/Tomcat-%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E8%8E%B7%E5%8F%96http%E8%AF%B7%E6%B1%82/", "categories": "Technology^技术, Java", "tags": "writing, Java, Tomcat", "date": "2020-12-23 22:10:00 +0800", "snippet": "tomcat-如何建立连接，获取远程请求学习探讨tomcat如何建立网络连接协议，并处理客户端过来的请求建立网络连接，指定http1.1通信协议tomcat在创建时，会创建连接对象，负责处理客户端的请求，基于socketconnector 连接 protocol 协议 endpoint终端 socket插座，端口连接创建初始化，对象创建顺序connector &amp;gt; protocol &amp;gt; endpoint &amp;gt; socket接收请求创建任务acceptor.socket.acceptor()-&amp;gt;​ socketWrapper(携带通信信..." }, { "title": "电影给人们带来什么", "url": "/posts/%E7%94%B5%E5%BD%B1%E4%BC%9A%E4%BD%BF%E4%BD%A0%E6%9B%B4%E7%88%B1%E7%94%9F%E6%B4%BB%E5%90%97/", "categories": "Life^生活, Film^影", "tags": "writing, film", "date": "2020-11-08 20:31:00 +0800", "snippet": "电影推荐红猪千寻变形金刚肖申克的救赎" }, { "title": "java 面向对象思想 封装多态继承", "url": "/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3(%E5%B0%81%E8%A3%85%E5%A4%9A%E6%80%81%E7%BB%A7%E6%89%BF)/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2020-10-26 20:10:00 +0800", "snippet": "java 面向对象思想 封装多态继承面向过程与面向对象编程分为面向对象编程和面向对象编程，汇编，C语言是面向过程写代码，C++/Java是面向对象其实面向过程和面向对象在本质都是一样写代码，然后将代码翻译成机器码让中央处理器去执行，但是在实现功能和整体设计上，相对于人来说，特别是Java，面向对象在设计上更抽象，是写代码在设计上的升华。Java里说，万物皆对象，如果说java的面向对象设计思想是java火起来的原因，那么Spring设计思想让Java的光彩放大。Java面向对象特性万物皆对象在Java中，除了基础数据类型，char int float 与数学计算相关的基本类型，其他所有的..." }, { "title": "Java中的数据结构", "url": "/posts/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2020-10-26 12:10:00 +0800", "snippet": "数据结构本文准备讲一下软件开发中的数据结构。物理存储因为数据结构是用来存储数据的具体方式，在讲数据结构之前，说说数据物理存储。平时软件开发中，一个8G的内存可以同一时间存储8G的数据，在物理上来说，这些存储单元是连续的，理论上可以可以看成是地址从0开始到 8*2^30次方。理想的话，什么数据通过寻址就能找到，很方便但是数据的使用在计算机中并不只是查询，也可以是修改，添加，删除，移动，考虑的数据安全，运算速度，使用效率的等综合，基于物理硬件的软件数据结构往往并不只有数组，还有其他，比如链表，图，树等。在复杂的情况下，各种各样的运算，不同程序的进程，线程都在使用这些内存或者cpu资源，这些数..." }, { "title": "互联网备忘录", "url": "/posts/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%87%E5%BF%98%E5%BD%95/", "categories": "Technology^技术, Website^网站", "tags": "writing, website", "date": "2020-10-04 20:31:00 +0800", "snippet": "互联网备忘录 写一个服务，保存个人信息到互联网方便查看，支持终端加密写了一个互联网信息备忘录，数据存储使用mysql 互联网通信https证书加密，备份加密Aes加密，用户自己保存密钥，用户需要使用邮箱注册账号服务地址： miji.sntree.cn内容用户登录后1.保存用户个人数据到服务端2.保存数据到服务端前可在客户端加密3.客户端信息查看（服务端加密数据解密）需要提醒的是，加密算法为AES国际加密标准（安全保证），加密和解密的密钥相同，随着社会科技的快速发展，人们生活越来越多样化，要记得东西（账号密码等）也更多，试着做一个互联网备忘录，将一些个人信息保存到互联网（可以加密），方便..." }, { "title": "nginx控制ip连接和请求数", "url": "/posts/nginx%E6%8E%A7%E5%88%B6ip%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%AF%B7%E6%B1%82%E6%95%B0/", "categories": "Technology^技术, Tools&Programs^程序工具", "tags": "writing, nginx", "date": "2020-09-27 19:00:00 +0800", "snippet": "nginx有两个模块，分别用来配置 ip最大连接数 和单位时间内最多请求数ip连接限制ngx_http_limit_conn_module官网模块地址: http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html主要指令 limit_conn_zone使用示例：http{ limit_conn_zone $binary_remote_addr zone=perip:10m; #定义一个 perip 访问限制区，连接使用的内存10M,存放ip信息 # $binary_remote_addr 表示ip作为键 即统计同一个i..." }, { "title": "世界眷顾谁", "url": "/posts/%E4%B8%96%E7%95%8C%E7%9C%B7%E9%A1%BE%E8%B0%81/", "categories": "Life^生活", "tags": "writing, Think", "date": "2020-09-22 22:01:00 +0800", "snippet": "不管世界眷顾与否，希望有机会我能写一些公开笔记，分享一些事物" }, { "title": "音乐可以不解释", "url": "/posts/%E8%AE%A9%E7%BB%86%E8%83%9E%E5%90%AC%E5%90%AC%E9%9F%B3/", "categories": "Life^生活, Music^音乐", "tags": "writing, music", "date": "2020-09-13 22:01:00 +0800", "snippet": "音乐听音乐时很轻" }, { "title": "臆想以后生活中的新能源", "url": "/posts/%E8%87%86%E6%83%B3%E4%BB%A5%E5%90%8E%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E6%96%B0%E8%83%BD%E6%BA%90/", "categories": "Life^生活, Think^思考", "tags": "writing, Think", "date": "2020-08-13 22:01:00 +0800", "snippet": "炎炎的夏日，把城市晒得像个烤炉，太阳的能量真大…这时脑中不禁在想，太阳能储能应该快了吧。随着科技的发展，全球变热，空气等污染持续，绿色环保的能源变得越来越有必要且更经济。现在与未来的能源可以怎样变化现在 能源主要是核能发电，火力发电，水力发电，少部分地区出现了太阳能发电，风力发电。为了发电，得少多少石油，燃料，造成多少环境污染。核虽然高效，但是核有核污染风险。这些都是产生很大的热量散播到空气中去的，相当于给地球双向加热，太阳光加热加上燃烧燃料或其他形式发热。未来 能源主要可以朝太阳能发电和化学能发电变化。现在是核力、火力发电为主。并且人们的生活中体现为：发电燃烧燃料产生大量能量，放出..." }, { "title": "关于游戏和其未来可能性", "url": "/posts/%E5%85%B3%E4%BA%8E%E6%B8%B8%E6%88%8F%E5%92%8C%E5%85%B6%E6%9C%AA%E6%9D%A5%E5%8F%AF%E8%83%BD%E6%80%A7/", "categories": "Life^生活, Game^游戏", "tags": "writing, Game", "date": "2020-08-13 20:31:00 +0800", "snippet": "游戏是人定义出来的，游戏无处不在，现在都有了电子竞技比赛（作为体育运动），游戏越来越影响人们的生活。也许在20世界末因为电子技术和互联网技术刚起步，游戏的发展与传播没有那么飞速，那么如今高效快速的互联网，随着社会生产力不断提高，个人认为游戏会呈现指数级速度发展（在形式和规模上）。关于游戏游戏是与生活质量挂钩的，有一定追求就不可避开，这里的游戏并不指狭义上的电子产品游戏下面看一下维基百科对游戏的阐述： 游戏，既可以指人的一种娱乐活动，也可以指这种活动过程。游戏的道具可以为玩具。在英语，体育比赛（Game）亦是游戏的一种，而体育运动亦是由游戏演变出来。游戏是一种有组织的玩耍，一般是以娱乐为..." }, { "title": "Thread", "url": "/posts/Thread/", "categories": "Technology^技术, Java", "tags": "writing, Java, Thread", "date": "2020-08-03 20:10:00 +0800", "snippet": "Thread线程，作为一个运算单位，一个线程的代码运行计算顺序是一行一行从上到下的，当有一些程序或者计算任务需要能够同时运行多个，那么一个线程不能满足要求，多个线程才可以。多个线程能并行执行计算，是其本意java线程Thread启动创建一个Thread对象或作其子类，调用start()方法启动一个线程。Thread thread = new Thread(); //创建线程对象thread.start(); //启动了解java线程的人都知道，启动线程得有一个Runnable实例用来运行run方法：官方文档解释说，调用start()方法是线程开始执行，java虚拟机将调用此线程的run方..." }, { "title": "关于博客", "url": "/posts/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/", "categories": "Life^生活, Think^思考, Problem^课题", "tags": "writing, Think", "date": "2020-07-27 22:01:00 +0800", "snippet": "关于博客博客能写什么或者想写什么Activity​ Game 游戏​ Music 音乐​ Movie 电影​ Think 思考​ Problem 课题，问题，困难Technology 技术类文章Other 其他" }, { "title": "The design of an automatically updated blog | 自动更新博客的设计", "url": "/posts/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AE%BE%E8%AE%A1-The-design-of-an-automatically-updated-blog/", "categories": "Technology^技术, Website^网站", "tags": "writing, website, blog", "date": "2020-07-25 20:31:00 +0800", "snippet": "The design of an automatically updated blog | 自动更新博客的设计 Convert markdown note files to blogs, and automatically update blog information 将markdown笔记文件转为博客，且能够自动更新博客信息博客可以用来记笔记或者发布文章，是一种信息载体，我们可以把一些信息放到博客，方便在网络环境查阅’’最近打算搭建个人博客，已知网络上的公共博客网站有博客园（国内），github（全球）都挺好用的，本人有在用，博客园和github也有挂的时候（访问不了），情况很少..." }, { "title": "Problem^^课题", "url": "/posts/Problem-%E8%AF%BE%E9%A2%98/", "categories": "Life^生活, Think^思考", "tags": "writing, Think", "date": "2020-07-10 22:01:00 +0800", "snippet": "有时候有些事情做起来，会比较困难，可以先立一个课题去了解他，再看看要不要做" }, { "title": "课题面板", "url": "/posts/%E8%AF%BE%E9%A2%98%E9%9D%A2%E6%9D%BF/", "categories": "", "tags": "", "date": "2020-07-07 00:00:00 +0800", "snippet": "课题2020-08-011.文件服务器搭建​ 文件上传下载，访问’’要点​ 有私密或者公开访问，携带session2.账号密码存储服务​ 账号密码等隐私信息保护存储服务’’​ 本地存储问题，终端本地存储技术localStorage要点​ 稳定，服务器稳定存储用户上传信息​ 加密，上传的信息经过加密（客户端加密）​ 安全，服务不能知晓用户的信息（明文），信息是双向加密3. 文章关于网络延时的影响关于多线程与高并发" }, { "title": "线程与进程", "url": "/posts/Thread-%E7%BA%BF%E7%A8%8B/", "categories": "Technology^技术, 并发", "tags": "writing, Thread", "date": "2020-06-17 23:10:00 +0800", "snippet": "线程与进程 线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。’’简单来讲，线程是运算最小单元。以下是个人理解线程与进程之间的关系首先想说进程和线程或者很多其他设计，都来自人对自然的模仿进程与进程可以并行（分情况）线程与线程可..." }, { "title": "事务", "url": "/posts/%E4%BA%8B%E5%8A%A1/", "categories": "Technology^技术, Transaction^事务", "tags": "writing, transaction", "date": "2020-06-12 19:00:00 +0800", "snippet": "事务在软件开发中的事务(Transaction)什么是事务 事务具有四个特征：原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability ）。这四个特性简称为 ACID 特性。’’事务指单元性事件或动作，具有原子性，不可再细分；隔离性，事务不被其他事情影响；一致性，事务的结果是可预见的。持久性，事务提交后，永久生效。描述事务最常见的列子使用转账来说明。通过转账描述事务A账户有人名币100元B账户有人名币50元现在要做一件事，A账户转账给B账户20元，那么这件事中算一个事务@1A账户减少20元 100-20 =..." }, { "title": "fail2ban 防ssh暴力破解", "url": "/posts/fail2ban/", "categories": "Technology^技术, System(Linux/Windows)", "tags": "writing, Linux, fail2ban, ssh", "date": "2020-06-03 23:10:00 +0800", "snippet": "fail2ban 防ssh暴力破解fail2ban 出现主要针对 暴力访问服务器而设计原理是通过linux 服务器上的访问日志，通过正则表达式，获取访问信息如ssh登录防暴力破解，通过正则ssh访问日志记录，获取暴利访问ip,家ip 通过防火墙隔离。’’安装官网 fail2ban# centos7wget &quot;https://github.com/fail2ban/fail2ban/archive/0.9.4.tar.gz&quot;lltar -zxvf 0.9.4.tar.gzcd fail2ban-0.9.4python setup.py install #注意，这里需要p..." }, { "title": "shell", "url": "/posts/shell/", "categories": "Technology^技术, System(Linux/Windows)", "tags": "writing, Linux, shell", "date": "2020-05-31 20:10:00 +0800", "snippet": "shellshell 是一种脚本命令 Shell 脚本（shell script），是一种为 shell 编写的脚本程序。’’写一个shell 脚本#!/bin/bash echo &quot;Hello World !&quot;#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。echo 命令用于向窗口输出文本。运行shell 脚本的方法1 是脚本文件成为可执行文件chmod +x ./test.sh #使脚本具有执行权限./test.sh #执行脚本2 作为解释器参数这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如..." }, { "title": "数据加密", "url": "/posts/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/", "categories": "Technology^技术, Algorithm^算法", "tags": "writing, Algorithm", "date": "2020-05-22 23:10:00 +0800", "snippet": "网络数据加密互联网，将全球不同的计算机等电子设备连接起来，使具备互相通信的条件，但是通信信息有些事隐私，有些通信不能被其他人知道。互联网私人生活交流信息不被恶意者随意窃取，也应该是社会秩序正常稳定的表现，平时的通信不过如此，涉及到商业信息，数据保密更显得格外重要。加密算法是保持通信信息不泄漏的一种技术，可用手段。’’前言网络数据加密是必须做的事安全正确必要性互联网通信通过电缆或者无线设备，信息是可以被中间人收到记录的，所以要考虑很多风险因素，信息必须被加密处理只是其中之一的考虑信息安全明文可能被第三方劫持查看。就像写信一样，A写信给B，在信件到达B手上之前，信件在途中可能被别人拆开看过然..." }, { "title": "高德地图API使用", "url": "/posts/gaode_map/", "categories": "Technology^技术, Tools&Programs^程序工具", "tags": "writing, map", "date": "2020-05-19 19:00:00 +0800", "snippet": "高德地图使用api地址https://lbs.amap.com/api/javascript-api/summary高德地图有提供公共接口，查看api，能实现一些项目基本需求效果基本使用注册帐号使用高德api，首先需要注册帐号，并且申请key(以个人或者公司的名字)，获取key后才能使用高德地图API去使用开发地图相关功能高德地图使用，省图显示，路线规划，行车轨迹行车路线规划 已行驶轨迹绘制 monitor.html&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;g..." }, { "title": "四轴飞行器相关技术", "url": "/posts/%E5%9B%9B%E8%BD%B4%E9%A3%9E%E8%A1%8C%E5%99%A8/", "categories": "Technology^技术, Quadcopter^四轴", "tags": "writing, Quadcopter", "date": "2020-05-09 21:50:00 +0800", "snippet": "四轴飞行器 第一次知道四轴飞行器还是大二大三那会，在寝室冲浪看到四轴飞行视频就被吸引了，之后有努力去了解四轴飞行器的技术发展与生态。’’四轴的出现与发展据本人了解到，四轴在国外是零几年就火起来了，很多视频都是零几年的，最早好像是06年左右，还有爱好者聚会一起玩四轴，展示自己四轴的视频。在国内大概是2008年之后甚至更晚。现在来说没有很疯狂了，只是目前还没有很好的应用起来，国外也是如此，目前主要应用领域在拍摄和农药碰洒领域，网上有说，亚马逊等跨国公司有使用四轴飞行器做短途快递投送。四轴的由来四轴飞行器早在20世界出1920年左右就出现了，因为那时候PID（控制技术）还不成熟，很难做到稳定..." }, { "title": "英文字符串排序算法", "url": "/posts/%E8%8B%B1%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/", "categories": "Technology^技术, Algorithm^算法", "tags": "writing, Algorithm", "date": "2020-05-08 23:10:00 +0800", "snippet": " 编程工作偶尔会遇到一些不常见问题需要处理，学编程处理问题也难免需要熟悉一些算法 以前学习的时候就遇到过一个看似简单的排序算法问题，当时的解决办法是我没有用过的，在此记录一下’’问题 - 英文字符串排序如下几个英文单词或者字母apple，car， a，family，sky，application，app，baby，back，background，bad，bbbbb，bee，cafe ，cake，care排序后的结果是/**aappappleapplicationbabybackbackgroundbadbbbbbbeecafe cakecarcarefamilysky**/规则逻辑通..." }, { "title": "SpringCloud-ServerConfig", "url": "/posts/SpringCloud-ServerConfig/", "categories": "Technology^技术, Java, Spring", "tags": "writing, Java, Spring", "date": "2020-04-23 20:10:00 +0800", "snippet": "ServerConfig SpringCloud 组件，ServerConfig 是配置服务中心，组件，用于统一管理项目配置’’原理读取配置文件内容到服务中心通过启动一个springboot服务（server-config），配置好git仓库地址（也可以svn或者其他），通过配置好的文件地址，访问配置文件，将配置读取到服务中心，并且文件内容修改后，可以实时刷新。客户端到配置中心读配置内容其他微服务访问配置不需要访问git，只需要通过访问ServerConfig读取配置，能到达统一配置的目的。搭建 前提概要，本搭建使用ide:Spring Tool Suite 4 Version: ..." }, { "title": "Java Object", "url": "/posts/Object/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2020-03-24 20:10:00 +0800", "snippet": "Java Object超类Object java中，所有类都默认继承一个超类，最顶层类，就是Object类。’’jdk类文件描述/** * Class {@code Object} is the root of the class hierarchy. * Every class has {@code Object} as a superclass. All objects, * including arrays, implement the methods of this class. * * @author unascribed * @see java.lang.Clas..." }, { "title": "Oracle", "url": "/posts/Oracle/", "categories": "Technology^技术, SQL^数据库", "tags": "writing, Oracle", "date": "2019-11-27 13:00:00 +0800", "snippet": "Oracle关于oracle数据库的一些基本使用笔记’’表结构操作创建表create table tableName (id varchar2(36) primary key, name varchar2(36), age number(12,2), createDate date, modifyDate date);-- 创建一张表，表名：tableName, -- 字段 id 字符串类型 主键，name 字符串类型普通字段，age 数字类型，createDate 创建日期，modifyDate 修改日期添加表字段alter table tab..." }, { "title": "Java IO", "url": "/posts/IO/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2019-06-23 20:10:00 +0800", "snippet": "Java IO IO: Input And Outputjava 中有IO，即输入与输出，输入input 输出outputjava 有典型的IO与NIO，常说的IO指典型IO, 阻塞IO， NIO表示非阻塞IO阻塞： 等待IO任务完成才能继续下一步的操作非阻塞： 暂不能清晰描述，可以查看网址文章链接：http://ifeve.com/overview/这里简单介绍Java中常见的文件读写’’字节流读写文件：读文件public static void readFile(String filePath) throws IOException { File file = new File..." }, { "title": "==与equals区别", "url": "/posts/java%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E9%97%AE%E9%A2%98,==%E4%B8%8Eequals%E7%9A%84%E5%8C%BA%E5%88%AB/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2019-05-23 20:10:00 +0800", "snippet": " java中方法参数传值问题, 基本数据传递值,对象传引用(内存地址)基本类型参数传递值(数值内容)引用类型参数传递址(内存地址)==与equals区别对象而言==比较的是两位数据的引用值(内存地址)equals比较两个对象内容是否相同，String比较的是本身字符串并且不同类如果重写了equals方法具体需要看重写equals方法内部逻辑。String A = new String(&quot;123&quot;);String B = &quot;12&quot; + &quot;3&quot;;System.out.printl(A == B);System.out.printl..." }, { "title": "nginx使用配置", "url": "/posts/nginx%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/", "categories": "Technology^技术, Tools&Programs^程序工具", "tags": "writing, nginx", "date": "2018-12-17 18:00:00 +0800", "snippet": "使用案列使用nginx首先要明确使用场景，这里是一台服务器实现多种类型访问：网站首页访问，GitLab访问，note(私人springboot项目)，静态文件访问。’’下面是一份配置文件 nginx.conf，这里假设服务起域名是www.test.com(配置文件是从真实主机copy过来的，仅原域名www.xxx.com被改为www.test.com)。它实现了以下功能:1.http://www.test.com——————————————-&amp;gt; 访问网站首页：html/index.html 实际访问/usr/local/nginx/html/index.html2.h..." }, { "title": "Java开发中json使用，各对象与json相互转换", "url": "/posts/Java%E5%BC%80%E5%8F%91%E4%B8%ADjson%E4%BD%BF%E7%94%A8-%E5%90%84%E5%AF%B9%E8%B1%A1%E4%B8%8Ejson%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/", "categories": "Technology^技术, Java", "tags": "writing, Java, Json", "date": "2018-12-11 20:10:00 +0800", "snippet": "Json：一种网络通信使用的数据格式，因为便于解析，比较流行，对象可以转为json，同样json也可以转对象。下面介绍下Json工具的简单使用（fastjson &amp;amp;&amp;amp; jackson）。’’FastJson　　阿里的json数据解析工具包，国内比较流行，用的较多。　　对象转json字符串　　　　JSON.toJSONString(user);　　对象转json对象　　　　(JSONObject)JSON.toJSON(user);　　json字符串转对象　　　　JSON.parseObject(jsonString, User.class);　　　　jso..." }, { "title": "java面向对象设计原则", "url": "/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/", "categories": "Technology^技术, Java", "tags": "writing, Java", "date": "2018-10-11 20:10:00 +0800", "snippet": "总原则 开闭原则（OCP：Open Closed Principle）　　对扩展开放，对修改关闭。设计功能模块的时候，应当使这个模块在不被修改的前提下可以被扩展（功能）一 里氏替换原则 （LSP：Liskov Substitution Principle）　　对于父类出现的地方，都可以用子类代替（多态，继承）二 单一职责原则（SRP：Single responsibility principle）　　一个类或模块应该只做一件事(一个类或者模块对应一个功能类),高内聚，低耦合，专注于单一功能（高内聚）三 接口隔离原则（ISP：Interface Segregation Principle）..." } ]
